---

#- name: Obtaining percona public key
#  apt_key:
#    url: 'http://www.percona.com/downloads/RPM-GPG-KEY-percona'
#    state: present
#
#- name: Adding percona repository
#  apt_repository:
#    repo: "deb http://repo.percona.com/apt {{ ansible_distribution_release }} main"
#    state: present
#
#- name: Adding percona source repository
#  apt_repository:
#    repo: "deb-src http://repo.percona.com/apt {{ ansible_distribution_release }} main"
#    state: present
# tasks file for percona-mysql

- name: Add Percona repository key
  apt_key:
    keyserver: keys.gnupg.net
    id: 9334A25F8507EFA5
    state: present

#- name: Add Percona repository
#  apt:
#    deb: "https://repo.percona.com/apt/percona-release_0.1-4.{{ansible_distribution_release}}_all.deb"

- name: Adding percona repository
  apt_repository:
    repo: "deb http://repo.percona.com/apt {{ ansible_distribution_release }} main"
    state: present

- name: Adding percona source repository
  apt_repository:
    repo: "deb-src http://repo.percona.com/apt {{ ansible_distribution_release }} main"
    state: present

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install percona database server
  apt:
    pkg: "{{ item }}"
    state: latest
  with_items:
  - "percona-server-server-{{ percona_mysql_version }}"
  - "percona-server-client-{{ percona_mysql_version }}"
  - percona-toolkit
  - percona-xtrabackup
  - python-mysqldb

- name: Copy .my.cnf file into the root home folder
  template:
    src: root.my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    mode: 0600

- name: Update MySQL root password
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ percona_mysql_root_password }}"
    #login_user: root
    #login_password: "{{ percona_mysql_root_password }}"
    #check_implicit_admin: yes
  with_items:
  - "{{ ansible_hostname }}"
  - 127.0.0.1
  - localhost

- name: Ensure anonymous users are not in the database
  mysql_user:
    name: ''
    host: "{{ item }}"
    state: absent
  with_items:
  - "{{ ansible_hostname }}"
  - localhost

- name: remove test database
  mysql_db:
    name: test
    state: absent

- name: Create fnv1a_64
  shell: /usr/bin/mysql -e "CREATE FUNCTION fnv1a_64 RETURNS INTEGER SONAME 'libfnv1a_udf.so'" && touch /var/log/libfnv1a_udf.so.done creates=/var/log/libfnv1a_udf.so.done

- name: Create fnv_64
  shell: /usr/bin/mysql -e "CREATE FUNCTION fnv_64 RETURNS INTEGER SONAME 'libfnv_udf.so'" && touch /var/log/libfnv_udf.so.done creates=/var/log/libfnv_udf.so.done

- name: Create murmur_hash
  shell: /usr/bin/mysql -e "CREATE FUNCTION murmur_hash RETURNS INTEGER SONAME 'libmurmur_udf.so'" && touch /var/log/libmurmur_udf.so.done creates=/var/log/libmurmur_udf.so.done

...
